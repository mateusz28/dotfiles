set makeprg=make
nnoremap <F6> :make clean<CR>
nnoremap <F7> :make<CR>
nnoremap <F8> :!bear make clean && bear make<CR>
nnoremap <F9> :!./build.sh<CR>
nnoremap <F5> :!ctags -R *<CR>
let g:ale_pattern_options = {
\   '.c$': {
\       'ale_linters': ['clangtidy', 'clangd'],
\       'ale_fixers': ['clang-format'],
\   },
\   '.py$': {
\       'ale_linters': ['pylint'],
\   },
\}
"let g:ale_c_parse_compile_commands = 1
"let g:ale_completion_enabled = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 1
let g:ale_set_balloons = 0
let g:ale_set_highlights = 1
nmap <F10> <Plug>(ale_fix)
nmap <C-]> <Plug>(ale_go_to_definition)
nmap <Leader>ad <Plug>(ale_go_to_definition)
nmap <Leader>ai <Plug>(ale_hover)
nmap <Leader>ar <Plug>(ale_find_references)
nnoremap <c-t> :call fzf#vim#files('', {'down': '40%', 'source': 'git ls-files --cached'})<CR>
let g:ale_c_clangd_options = '-log=verbose'
let g:deoplete#sources#clang#clang_complete_database='./'
"let g:ale_c_clangformat_options = '-style="{BasedOnStyle: Google, IndentWidth: 2, ColumnLimit: 100, AllowShortFunctionsOnASingleLine: None, KeepEmptyLinesAtTheStartOfBlocks: false}"'
"let g:ale_sign_error = '✗✗'
"let g:ale_sign_warning = '∆∆'
"let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '']
